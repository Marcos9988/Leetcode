class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> tc(m,vector<int>(n,0));
        
        tc[0][0] = grid[0][0];
        
        for(int i = 1; i < m; i++)
            tc[i][0] = tc[i - 1][0] + grid[i][0];
        
        for(int i = 1; i < n; i++)
            tc[0][i] = tc[0][i - 1] + grid[0][i];
        
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++)
                tc[i][j] = min(tc[i - 1][j], tc[i][j - 1]) + grid[i][j];
        
        return tc[m - 1][n - 1];
    }
};
static auto _ = [] { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0); return 0; } ();

OR

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if(m==0)    return 0;
        int n = grid[0].size();
        if(n==0)    return 0;
        for(int i=1; i<m; i++)
            grid[i][0] += grid[i-1][0];
        
        for(int i=1; i<n; i++)
            grid[0][i] += grid[0][i-1];
        for(int i=1; i<m; i++)
            for(int j=1; j<n; j++)
                grid[i][j] += min(grid[i-1][j], grid[i][j-1]);
        return grid[m-1][n-1];
    }
};