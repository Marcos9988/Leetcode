class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.size() == 0)
            return 0;
        int ans = 0;
        int row = matrix.size(), col = matrix[0].size();
        int dp[row][col];
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                dp[i][j] = matrix[i][j] - '0';
                if(i && j && matrix[i][j] == '1')
                    dp[i][j] = 1 + min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1]));
                ans = max(ans, dp[i][j]);
            }
        }
        return ans*ans;
    }
};
static auto _ = [] { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0); return 0; } ();