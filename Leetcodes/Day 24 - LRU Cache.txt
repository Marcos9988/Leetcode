class LRUCache {
public:
    int cacheSize;
    map<int, int> m;
    deque<int> dq;
    
    LRUCache(int capacity) {
        m.clear();
        dq.clear();
        cacheSize = capacity;
    }
    
    int get(int key) {
        if (m.find(key) == m.end()) {
            return -1;
        } else {
            deque<int>::iterator it = dq.begin();
            while (*it != key) {
                it++;
            }
            dq.erase(it);
            dq.push_front(key);
            
            return m[key];
        }
    }
    
    void put(int key, int value) {
        if (m.find(key) == m.end()) {
            if (cacheSize == dq.size()) {
                int last = dq.back();
                dq.pop_back();
                m.erase(last);
            }
        } else {
            deque<int>::iterator it = dq.begin();
            while (*it != key) {
                it++;
            }
            
            dq.erase(it);
            m.erase(key);
        }
        dq.push_front(key);
        m[key] = value;
    }
};
static auto _ = [] { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0); return 0; } ();
/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */